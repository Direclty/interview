//1、下拉刷新原理
//	就是在内容View不能下拉或者上滑的时候响应用户触摸事件，在顶部或底部显示一个刷新视图，在程序刷新完成隐藏，
//2、实现
//	01、既然要在头部和顶部添加刷新视图，我们的控件应该是个ViewGroup，我是直接继承FrameLayout，这个控件的名字叫[NsRefreshLayout](https://github.com/xiaolifan/NsRefreshLayout)。
//然后我们需要定义一些属性，如是否自动触发上拉加载更多、刷新视图中的文字颜色等。
//	02、我们需要做到对Touch事件的处理不影响内容视图的功能，所以我们只处理Touch事件，不消耗Touch事件，一个合适的回调很重要，
//找来找去我选择了dispatchTouchEvent，官方文档对这个函数的描述如下：处理Touch事件的流程如下，
//ACTION\_DOWN、ACTION\_MOVE时记录Touch的位置，ACTION\_MOVE时用当前Touch的位置减去上次DOWN或者MOVE的位置，
//得到手指滑动的距离，用这个距离来控制内容视图、刷新视图的显示位置，当达到触发刷新的位置后，提示用户松手触发刷新，
//用户松手后开始刷新动画并通知程序开始刷新
//
//（参考：https://www.jianshu.com/p/670941c56ca6）
//
//3、什么是内部类？内部类的作用
//	https://www.cnblogs.com/dolphin0520/p/3811445.html
//
//	作用： 1）、内部类可以很好的实现隐藏一般的非内部类，是不允许有 private 与 protected 权限的，但内部类可以
//
//		   2）、内部类拥有外围类的所有元素的访问权限
//
//	       3）、可是实现多重继承
//
//	       4）、可以避免修改接口而实现同一个类中两种同名方法的调用。
//
//4、抽象类和接口区别
//抽象类：java中抽象类更利于代码的维护和重用
//	1）、抽象方法：只有方法的申明，没有具体的实现；
//	2）、如果一个类中包含抽象方法，那么这个类就叫做抽象类；
//抽象类和普通类的区别：
//	1）、不能创建对象
//	2）、方法必须用public、或者protected修饰
//	3）、继承抽象类时候必须继承抽象方法，如果不继承，则需要将其定义为abstract类
//接口定义：达到统一访问，弥补java不支持多重继承
//	1）、接口，英文称作interface，泛指供别人条用的方法或函数。接口中可以包含变量和方法（注意：变量会隐式的指定为 public  static  final，方法会隐式的指定为 public abstract）
//	2）、接口中的方法不能有具体的实现，接口中的方法必须都是抽象方法
//	3）、接口比抽象类更抽象
//抽象类和接口的区别：
//	1、语法层上的区别：
//		1）、抽象类可以提供成员方法的实现细节，而接口中只能存在 public abstract
//		2）、抽象类的成员变量可以是各种类型，而接口中只能是 public static final
//		3）、接口中不能包含静态代码块和静态方法，抽象类可以
//		4）、一个类只能继承一个抽象类，一个类可以实现多个接口
//	2、设计层上的区别：
//		1）抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象
//		2）抽象类作为很多子类的父类，他是一种模板式设计，接口是一种行为规范，它是一种辐射式设计（ pptA 和 pptB，公共的部分是pptC，如果他们的公共部分发生改变那么只需要改c
//		接口的方法改变，那么实现它的所有类都必须相应的改动）
//
//	http://blog.csdn.net/fenglibing/article/details/2745123
//	http://blog.csdn.net/wenwen091100304/article/details/48381023
//	https://juejin.im/entry/576d0e73816dfa0055cb6e07（详细一些）
//
//5、泛型中extends和super的区别
//	<? extends T> 限定参数类型的上界：参数类型必须是T或T的子类型
//	<? super T>   限定参数类型的下界：参数类型必须是T或T的超类型
//
//6、进程和线程的区别
//	按照操作系统中的描述。线程是 CPU 调度的最小单元，同时线程也是一种有限的资源。而进程一般指一个执行单元，在 PC 和移动设备上指一个程序或者一个应用。一个进程可以包含多个线程。
//对于 Android 来说，它是一种基于 Linux 内核的移动操作系统，它的进程和线程有着其特有的性质。我们这篇文章就来聊聊关于 Android 中的进程和线程，我们需要了解的知识。
//	https://juejin.im/entry/5a601911518825734859ff30
//
//7、封装
//	封装从字面上来理解就是包装的意思，专业点就是信息隐藏，是指利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体，数据被保护在抽象数据类型的内部，
//尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。
//	http://www.cnblogs.com/chenssy/p/3351835.html
//8、继承
//	http://www.cnblogs.com/chenssy/p/3354884.html
//9、多态
//	1）、 封装隐藏了类的内部实现机制，可以在不影响使用的情况下改变类的内部结构，同时也保护了数据。对外界而已它的内部细节是隐藏的，暴露给外界的只是它的访问方法。
//	2）、 继承是为了重用父类代码。两个类若存在 IS-A的关系就可以使用继承。，同时继承也为实现多态做了铺垫。
//	3）、 多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，
//该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，
//从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性
//	http://www.cnblogs.com/chenssy/p/3372798.html
//10、Java异常体系简析
//	https://www.cnblogs.com/yiwangzhibujian/p/7141390.html
//
//
//11、java深入源码级的面试题（有难度）
//https://www.jianshu.com/p/985534b21089
//
//12、数据结构
////基础
//https://www.cnblogs.com/kevinZhu/p/6953182.html
////进阶：
//http://blog.csdn.net/haovip123/article/details/45423683
////java容器类
//https://www.jianshu.com/p/047e33fdefd2
//
//13、数据结构
//https://www.cnblogs.com/1shawn/p/4958532.html
//https://blog.csdn.net/mr_linjw/article/details/51335490
//
//
//
//
//
//
https:学习













